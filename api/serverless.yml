# This template manages backend resources for the 'Jamin Productions api, both prod and dev, including:
#   - API gateway endpoints
#   - Lambda handlers for each endpoint
#   - Dynamo DB tables (global and regional)
#   - Custom domains (prod only) mapped to regional latency routes

service: jamin-productions-backend
frameworkVersion: "3"

package:
  individually: false # to help avoid EMFILE: too many open files error, in addition to moving dev dependencies

plugins:
  - serverless-domain-manager

custom:
  deploymentBucketName: "jaminproductions.serverless.${opt:region, self:provider.region}.deploys"
  interactiveMediaTableName: "interactive-media-form-submission-${sls:stage}"
  requestsTableName: "song-requests-form-submission-${sls:stage}"
  eventsTableName: "jamin-productions-events-${sls:stage}"
  spotifyAuthTableName: "requests-spotify-auth"
  stackName: "jamin-productions-api-backend-stack-${sls:stage}"
  staticBucketName: "static.jaminproductions.com"
  staticBucketRegion: "us-east-1"
  # spotifyAppName: "Jamin Productions"
  spotifyAppName: "Event Media Control"

  # for route 53 domain and latency routing
  customDomainsEnabled:
    dev: false
    prod: true
  certificateName: jaminproductions.com
  regionalApiDomain: api-${opt:region, self:provider.region}.${self:custom.certificateName}
  apiDomain: api.${self:custom.certificateName}
  customDomains:
    # api.jaminproductions.com/{stage}
    - http:
        certificateName: "${self:custom.certificateName}"
        domainName: ${self:custom.apiDomain}
        basePath: ""
        endpointType: "regional"
        createRoute53Record: true
        securityPolicy: tls_1_2
        route53Params:
          routingPolicy: latency
        autoDomain: true # so gets included in severless deploy
        enabled: ${self:custom.customDomainsEnabled.${opt:stage, self:provider.stage}}
    # api.{region}.jaminproductions.com/{stage}
    - http:
        certificateName: "${self:custom.certificateName}"
        domainName: ${self:custom.regionalApiDomain}
        basePath: ""
        endpointType: "regional"
        createRoute53Record: true
        securityPolicy: tls_1_2
        route53Params:
          routingPolicy: latency
        autoDomain: true
        enabled: ${self:custom.customDomainsEnabled.${opt:stage, self:provider.stage}}

provider:
  name: aws
  stage: dev # use --stage {stage_name} to override during deploy
  region: us-east-1 # use --region {region_name} to override during deploy, new regions will need SSM params
  stackName: ${self:custom.stackName}
  runtime: nodejs18.x
  stackTags:
    AppManagerCFNStackKey: "Jamin-Productions-serverless-${sls:stage}" # to enable Application Manager cost tracking
  deploymentBucket:
    name: ${self:custom.deploymentBucketName}
    maxPreviousDeploymentArtifacts: 10
    versioning: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:ConditionCheckItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - s3:PutObject
            - s3:GetObject
          Resource:
            - !Sub "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:custom.eventsTableName}"
            - !Sub "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:custom.interactiveMediaTableName}"
            - !Sub "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:custom.requestsTableName}"
            - !Sub "arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/${self:custom.spotifyAuthTableName}"
            - "arn:aws:s3:::${self:custom.staticBucketName}/*"
  environment:
    REQUESTS_TABLE: ${self:custom.requestsTableName}
    EVENTS_TABLE: ${self:custom.eventsTableName}
    INTERACTIVE_MEDIA_TABLE: ${self:custom.interactiveMediaTableName}
    SPOTIFY_APP_NAME: ${self:custom.spotifyAppName}
    SPOTIFY_AUTH_TABLE: ${self:custom.spotifyAuthTableName}
    # SPOTIFY_CLIENT_ID: ${ssm:jamin-productions-spotify-app-client-id}
    # SPOTIFY_CLIENT_SECRET: ${ssm:jamin-productions-spotify-app-client-secret}
    SPOTIFY_CLIENT_ID: ${ssm:event-media-control-client-id}
    SPOTIFY_CLIENT_SECRET: ${ssm:event-media-control-client-secret}
    STATIC_CONTENT_BUCKET: ${self:custom.staticBucketName}
    STATIC_BUCKET_REGION: ${self:custom.staticBucketRegion}
    UPLOAD_URL_EXPIRATION_SECONDS: 60
    APP_STAGE: ${sls:stage}
  httpApi:
    metrics: true
    cors: true
    disableDefaultEndpoint: ${self:custom.customDomainsEnabled.${opt:stage, self:provider.stage}}

functions:
  handleEvents:
    memorySize: 512
    timeout: 10
    name: jp-events-handler-${sls:stage}
    description: "Handler for event information requests"
    handler: Events/routes.handler
    events:
      - httpApi: "GET /events/{eventId}"
    # role:
  handleRequests:
    memorySize: 512
    timeout: 10
    name: song-requests-form-handler-${sls:stage}
    description: "Handler for song request form submissions"
    handler: Requests/routes.handler
    events:
      - httpApi: "GET /requests/{eventId}"
      - httpApi: "POST /requests/{eventId}"
    # role:
  handleInteractiveMediaSubmissions:
    memorySize: 512
    timeout: 10
    name: interactive-media-form-handler-${sls:stage}
    description: "Handler for media submissions"
    handler: InteractiveMedia/routes.handler
    events:
      - httpApi: "GET /media/{eventId}/photo_mosaic"
      - httpApi: "POST /media/{eventId}/photo_mosaic"
    # role:
  handleSpotifyIntegration:
    memorySize: 512
    timeout: 10
    name: requests-spotify-integration-${sls:stage}
    description: "Handler for adding requested songs to spotify playlists"
    handler: Spotify/routes.handler
    events:
      - httpApi: "PUT /spotify/volume"
      - httpApi: "POST /spotify/{eventId}/add_to_playlist"
    # role:

resources:
  Conditions:
    IsUsEast1: !Equals [!Ref AWS::Region, us-east-1]
    IsProd:
      Fn::Equals:
        - ${sls:stage}
        - prod
    CreateSpotifyAuthTable: !And [!Condition IsUsEast1, !Condition IsProd]
  Resources:
    RequestsTable:
      Type: AWS::DynamoDB::GlobalTable
      DeletionPolicy: Retain
      Condition: IsUsEast1
      Properties:
        BillingMode: PAY_PER_REQUEST
        Replicas:
          - Region: us-east-1
          - Region: us-west-2
        AttributeDefinitions:
          - AttributeName: event_name
            AttributeType: S
          - AttributeName: submission_timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: event_name
            KeyType: HASH
          - AttributeName: submission_timestamp
            KeyType: RANGE
        TableName: ${self:custom.requestsTableName}
        StreamSpecification:
          StreamViewType: KEYS_ONLY
    EventsTable:
      Type: AWS::DynamoDB::GlobalTable
      DeletionPolicy: Retain
      Condition: IsUsEast1
      Properties:
        BillingMode: PAY_PER_REQUEST
        Replicas:
          - Region: us-east-1
          - Region: us-west-2
        AttributeDefinitions:
          - AttributeName: event_id
            AttributeType: S
        KeySchema:
          - AttributeName: event_id
            KeyType: HASH
        TableName: ${self:custom.eventsTableName}
        StreamSpecification:
          StreamViewType: KEYS_ONLY
    InteractiveMediaTable:
      Type: AWS::DynamoDB::GlobalTable
      DeletionPolicy: Retain
      Condition: IsUsEast1
      Properties:
        BillingMode: PAY_PER_REQUEST
        Replicas:
          - Region: us-east-1
          - Region: us-west-2
        AttributeDefinitions:
          - AttributeName: event_name
            AttributeType: S
          - AttributeName: image_key
            AttributeType: S
        KeySchema:
          - AttributeName: event_name
            KeyType: HASH
          - AttributeName: image_key
            KeyType: RANGE
        TableName: ${self:custom.interactiveMediaTableName}
        StreamSpecification:
          StreamViewType: KEYS_ONLY
    SpotifyAuthTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Condition: CreateSpotifyAuthTable
      Properties:
        AttributeDefinitions:
          - AttributeName: app_name
            AttributeType: S
          - AttributeName: flow_type
            AttributeType: S
        KeySchema:
          - AttributeName: app_name
            KeyType: HASH
          - AttributeName: flow_type
            KeyType: RANGE
        TableName: ${self:custom.spotifyAuthTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    InteractiveMediaTableArn:
      Description: ARN of the interactive media DDB table
      Value: !Sub "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:custom.interactiveMediaTableName}"
      Export:
        Name: !Sub "${AWS::StackName}-InteractiveMediaTableArn"
    InteractiveMediaTableName:
      Description: Name of the interactive media DDB table
      Value: ${self:custom.interactiveMediaTableName}
      Export:
        Name: !Sub "${AWS::StackName}-InteractiveMediaTableName"
    EventsTableArn:
      Description: ARN of the events DDB table
      Value: !Sub "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:custom.eventsTableName}"
      Export:
        Name: !Sub "${AWS::StackName}-EventsTableArn"
    EventsTableName:
      Description: Name of the events DDB table
      Value: ${self:custom.eventsTableName}
      Export:
        Name: !Sub "${AWS::StackName}-EventsTableName"
