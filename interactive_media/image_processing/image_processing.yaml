AWSTemplateFormatVersion: "2010-09-09"
Description: "Manages resources for photo mosaic image processing/rekognition flow"
Parameters:
  StaticBucketStackName:
    Type: String
    Description: CF stack name that manages static content bucket
    Default: static-jaminproductions-com
  ServerlessStackName:
    Type: String
    Description: CF stack name that manages interactive media upload endpoint (minus the stage name)
    Default: jamin-productions-api-backend-stack
  CodeBucketName:
    Type: String
    Description: Bucket name where code packages are stored
    Default: jamin-productions-misc-code
  LambdaCodePackageVersion:
    Type: String
    Description: The version of the Python code package to use for the Lambda
    Default: 1
  DeploymentStage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment stage (dev or prod)
Resources:
  # role to allow the Lambda to read and be triggered from S3, update DDB entries, run Rekognition, and write logs
  ImageFilteringLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub JaminProductions-ImageProcessingLambdaRole-${DeploymentStage}
      Policies:
        - PolicyName: ImageProcessingLambdaReadFromS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # - s3:GetObject
                  # - s3:PutObject # to be able to upload thumbnail versions
                  - s3:*
                  - s3-object-lambda:*
                Resource:
                  - "*"
        - PolicyName: ImageProcessingLambdaUpdateDynamo
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - Fn::ImportValue: !Sub "${ServerlessStackName}-${DeploymentStage}-InteractiveMediaTableArn"
        - PolicyName: ImageProcessingLambdaRekognition
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # - rekognition:DetectModerationLabels
                  - "rekognition:*"
                Resource:
                  - "*"
        - PolicyName: ImageProcessorLogToCloudwatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
  ImageProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Role: !GetAtt ImageFilteringLambdaRole.Arn
      Handler: image_processing.handler
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Sub "packages/image_processing/image_processing_v${LambdaCodePackageVersion}.zip"
      Description: Checks image from S3 for moderation labels
      FunctionName: !Sub "interactive-media-image-processing-${DeploymentStage}"
      Timeout: 10
      Layers:
        - !Ref ImageProcessingPillowLayer
      MemorySize: 512
  ImageProcessingPillowLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: pillow
      Description: Layer containing the PIL library files
      Content:
        S3Bucket: !Ref CodeBucketName
        S3Key: packages/layers/pillow.zip
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ImageProcessingLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn:
        "Fn::ImportValue":
          "Fn::Sub": "${StaticBucketStackName}-StaticBucketArn"
Outputs:
  ImageProcessingLambdaArn:
    Description: Arn of the image processing Lambda function
    Value: !GetAtt ImageProcessingLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ImageProcessingLambdaArn"
